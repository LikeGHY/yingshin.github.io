---
layout: post
title:  "stl-algorithm笔记之count count_if"
date: 2015-01-25 09:36:44 
excerpt: "stl algorithm count count_if notes"
categories: [stl]
tags: [stl]
---

count系列函数用于对区间进行统计。

###function template

```
template<class InputIt, class T>
typename iterator_traits<InputIt>::difference_type count(InputIt first, InputIt last, const T& value)
template<class InputIt, class UnaryPredicate>
typename iterator_traits<InputIt>::difference_type count(InputIt first, InputIt last, UnaryPredicate)
```


<!--more-->


###函数说明
count系列函数用于区间统计

###函数行为


```
template<class InputIt, class T>
typename iterator_traits<InputIt>::difference_type count(InputIt first, InputIt last, const T& value)
{
    typename iterator_traits<InputIt>:difference_type ret = 0;
    for (; first != last; ++first) {
        if (*first == value)
            ++ret;
    }

    return ret;
}
template<class InputIt, class UnaryPredicate>
typename iterator_traits<InputIt>::difference_type count(InputIt first, InputIt last, UnaryPredicate p)
{
    typename iterator_traits<InputIt>:difference_type ret = 0;
    for (; first != last; ++first) {
        if (p(*first) == value)
            ++ret;
    }

    return ret;
}
```


###code

```
bool f(const int& i) {return i % 3 == 0;}
int main()
{
    int data[] = {1, 2, 3, 4, 4, 3, 5, 6, 7, 8, 9, 0};
    std::vector<int> vec(data, data + 12);

    std::cout << std::count(vec.begin(), vec.end(), 3) << std::endl;
    std::cout << std::count(vec.begin(), vec.begin() + 4, 4) << std::endl;

    std::cout << std::count_if(vec.begin(), vec.end(), f) << std::endl;

    return 0;
}
```

###Reference:
1. [CPPReference count](http://en.cppreference.com/w/cpp/algorithm/count)
